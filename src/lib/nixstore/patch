diff --git a/src/libstore/builtins.cc b/src/libstore/builtins.cc
index a1c4b48..4d58850 100644
--- a/src/libstore/builtins.cc
+++ b/src/libstore/builtins.cc
@@ -35,12 +35,6 @@ void builtinFetchurl(const BasicDerivation & drv)
         restorePath(storePath, source);
     } else
         writeFile(storePath, data.data);
-
-    auto executable = drv.env.find("executable");
-    if (executable != drv.env.end() && executable->second == "1") {
-        if (chmod(storePath.c_str(), 0755) == -1)
-            throw SysError(format("making ‘%1%’ executable") % storePath);
-    }
 }
 
 }
diff --git a/src/libstore/derivations.cc b/src/libstore/derivations.cc
index 7959d5b..0b2f210 100644
--- a/src/libstore/derivations.cc
+++ b/src/libstore/derivations.cc
@@ -5,6 +5,12 @@
 #include "misc.hh"
 #include "worker-protocol.hh"
 
+/* Genode includes */
+#include <nix/attached_rom_dataspace.h>
+#include <rom_session/connection.h>
+#include <dataspace/client.h>
+#include <util/label.h>
+
 
 namespace nix {
 
@@ -48,7 +54,7 @@ Path writeDerivation(StoreAPI & store,
 static Path parsePath(std::istream & str)
 {
     string s = parseString(str);
-    if (s.size() == 0 || s[0] != '/')
+    if (s.size() == 0)
         throw FormatError(format("bad path ‘%1%’ in derivation") % s);
     return s;
 }
@@ -113,10 +119,35 @@ static Derivation parseDerivation(const string & s)
 }
 
 
-Derivation readDerivation(const Path & drvPath)
+/**
+ * Derivations are read from ROM session.
+ * Serving them over ROM makes sense because
+ * clients can be restricted to capability-like
+ * access to the store rather than a full file
+ * system session. Clients and the builder load
+ * the same derivation files during build
+ * operations, so a ROM server can act as a
+ * shared cache.
+ */
+Derivation readDerivation(Genode::Env &env, const Path & drvPath)
 {
+    using namespace Genode;
+
+    // TODO: deal with the slashes elsewhere
+    char const *drv_name = drvPath.c_str();
+    while (*drv_name == '/') ++drv_name;
+
+    string raw_drv;
+
+    try {
+		Nix::Attached_rom_dataspace drv_rom(env, drv_name);
+        raw_drv.assign(drv_rom.local_addr<char>(), drv_rom.size());
+    } catch (Genode::Rom_connection::Rom_connection_failed) {
+        throw Error(format("error opening ROM connection to derivation ‘%1%’") % drvPath);
+    }
+
     try {
-        return parseDerivation(readFile(drvPath));
+        return parseDerivation(raw_drv);
     } catch (FormatError & e) {
         throw Error(format("error parsing derivation ‘%1%’: %2%") % drvPath % e.msg());
     }
@@ -251,7 +282,7 @@ Hash hashDerivationModulo(StoreAPI & store, Derivation drv)
         Hash h = drvHashes[i.first];
         if (h.type == htUnknown) {
             assert(store.isValidPath(i.first));
-            Derivation drv2 = readDerivation(i.first);
+            Derivation drv2 = readDerivation(store.env(), i.first);
             h = hashDerivationModulo(store, drv2);
             drvHashes[i.first] = h;
         }
diff --git a/src/libstore/derivations.hh b/src/libstore/derivations.hh
index f084204..e5775fa 100644
--- a/src/libstore/derivations.hh
+++ b/src/libstore/derivations.hh
@@ -66,7 +66,7 @@ Path writeDerivation(StoreAPI & store,
     const Derivation & drv, const string & name, bool repair = false);
 
 /* Read a derivation from a file. */
-Derivation readDerivation(const Path & drvPath);
+Derivation readDerivation(Genode::Env &env, const Path & drvPath);
 
 /* Print a derivation. */
 string unparseDerivation(const Derivation & drv);
diff --git a/src/libstore/download.cc b/src/libstore/download.cc
index 822e9a8..8d35231 100644
--- a/src/libstore/download.cc
+++ b/src/libstore/download.cc
@@ -11,13 +11,6 @@
 
 namespace nix {
 
-double getTime()
-{
-    struct timeval tv;
-    gettimeofday(&tv, 0);
-    return tv.tv_sec + (tv.tv_usec / 1000000.0);
-}
-
 struct Curl
 {
     CURL * curl;
@@ -26,10 +19,6 @@ struct Curl
 
     struct curl_slist * requestHeaders;
 
-    bool showProgress;
-    double prevProgressTime{0}, startTime{0};
-    unsigned int moveBack{1};
-
     static size_t writeCallback(void * contents, size_t size, size_t nmemb, void * userp)
     {
         Curl & c(* (Curl *) userp);
@@ -72,19 +61,6 @@ struct Curl
 
     int progressCallback(double dltotal, double dlnow)
     {
-        if (showProgress) {
-            double now = getTime();
-            if (prevProgressTime <= now - 1) {
-                string s = (format(" [%1$.0f/%2$.0f KiB, %3$.1f KiB/s]")
-                    % (dlnow / 1024.0)
-                    % (dltotal / 1024.0)
-                    % (now == startTime ? 0 : dlnow / 1024.0 / (now - startTime))).str();
-                std::cerr << "\e[" << moveBack << "D" << s;
-                moveBack = s.size();
-                std::cerr.flush();
-                prevProgressTime = now;
-            }
-        }
         return _isInterrupted;
     }
 
@@ -124,8 +100,6 @@ struct Curl
 
     bool fetch(const string & url, const DownloadOptions & options)
     {
-        showProgress = options.forceProgress || isatty(STDERR_FILENO);
-
         curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
 
         if (options.verifyTLS)
@@ -149,17 +123,7 @@ struct Curl
 
         curl_easy_setopt(curl, CURLOPT_HTTPHEADER, requestHeaders);
 
-        if (showProgress) {
-            std::cerr << (format("downloading ‘%1%’... ") % url);
-            std::cerr.flush();
-            startTime = getTime();
-        }
-
         CURLcode res = curl_easy_perform(curl);
-        if (showProgress)
-            //std::cerr << "\e[" << moveBack << "D\e[K\n";
-            std::cerr << "\n";
-        checkInterrupt();
         if (res == CURLE_WRITE_ERROR && etag == options.expectedETag) return false;
         if (res != CURLE_OK)
             throw DownloadError(format("unable to download ‘%1%’: %2% (%3%)")
@@ -190,85 +154,7 @@ DownloadResult downloadFile(string url, const DownloadOptions & options)
 
 Path downloadFileCached(const string & url, bool unpack)
 {
-    Path cacheDir = getEnv("XDG_CACHE_HOME", getEnv("HOME", "") + "/.cache") + "/nix/tarballs";
-    createDirs(cacheDir);
-
-    string urlHash = printHash32(hashString(htSHA256, url));
-
-    Path dataFile = cacheDir + "/" + urlHash + ".info";
-    Path fileLink = cacheDir + "/" + urlHash + "-file";
-
-    Path storePath;
-
-    string expectedETag;
-
-    int ttl = settings.get("tarball-ttl", 60 * 60);
-    bool skip = false;
-
-    if (pathExists(fileLink) && pathExists(dataFile)) {
-        storePath = readLink(fileLink);
-        store->addTempRoot(storePath);
-        if (store->isValidPath(storePath)) {
-            auto ss = tokenizeString<vector<string>>(readFile(dataFile), "\n");
-            if (ss.size() >= 3 && ss[0] == url) {
-                time_t lastChecked;
-                if (string2Int(ss[2], lastChecked) && lastChecked + ttl >= time(0))
-                    skip = true;
-                else if (!ss[1].empty()) {
-                    printMsg(lvlDebug, format("verifying previous ETag ‘%1%’") % ss[1]);
-                    expectedETag = ss[1];
-                }
-            }
-        } else
-            storePath = "";
-    }
-
-    string name;
-    auto p = url.rfind('/');
-    if (p != string::npos) name = string(url, p + 1);
-
-    if (!skip) {
-
-        try {
-            DownloadOptions options;
-            options.expectedETag = expectedETag;
-            auto res = downloadFile(url, options);
-
-            if (!res.cached)
-                storePath = store->addTextToStore(name, res.data, PathSet(), false);
-
-            assert(!storePath.empty());
-            replaceSymlink(storePath, fileLink);
-
-            writeFile(dataFile, url + "\n" + res.etag + "\n" + std::to_string(time(0)) + "\n");
-        } catch (DownloadError & e) {
-            if (storePath.empty()) throw;
-            printMsg(lvlError, format("warning: %1%; using cached result") % e.msg());
-        }
-    }
-
-    if (unpack) {
-        Path unpackedLink = cacheDir + "/" + baseNameOf(storePath) + "-unpacked";
-        Path unpackedStorePath;
-        if (pathExists(unpackedLink)) {
-            unpackedStorePath = readLink(unpackedLink);
-            store->addTempRoot(unpackedStorePath);
-            if (!store->isValidPath(unpackedStorePath))
-                unpackedStorePath = "";
-        }
-        if (unpackedStorePath.empty()) {
-            printMsg(lvlInfo, format("unpacking ‘%1%’...") % url);
-            Path tmpDir = createTempDir();
-            AutoDelete autoDelete(tmpDir, true);
-            // FIXME: this requires GNU tar for decompression.
-            runProgram("tar", true, {"xf", storePath, "-C", tmpDir, "--strip-components", "1"}, "");
-            unpackedStorePath = store->addToStore(name, tmpDir, true, htSHA256, defaultPathFilter, false);
-        }
-        replaceSymlink(unpackedStorePath, unpackedLink);
-        return unpackedStorePath;
-    }
-
-    return storePath;
+    return "";
 }
 
 
diff --git a/src/libstore/globals.cc b/src/libstore/globals.cc
index e704837..e275219 100644
--- a/src/libstore/globals.cc
+++ b/src/libstore/globals.cc
@@ -6,7 +6,6 @@
 
 #include <map>
 #include <algorithm>
-#include <unistd.h>
 
 
 namespace nix {
@@ -41,14 +40,11 @@ Settings::Settings()
     buildTimeout = 0;
     useBuildHook = true;
     printBuildTrace = false;
-    reservedSize = 8 * 1024 * 1024;
+    reservedSize = 1024 * 1024;
     fsyncMetadata = true;
     useSQLiteWAL = true;
     syncBeforeRegistering = false;
     useSubstitutes = true;
-    buildUsersGroup = getuid() == 0 ? "nixbld" : "";
-    useSshSubstituter = true;
-    impersonateLinux26 = false;
     keepLog = true;
     compressLog = true;
     maxLogSize = 0;
@@ -59,65 +55,11 @@ Settings::Settings()
     gcKeepDerivations = true;
     autoOptimiseStore = false;
     envKeepDerivations = false;
-    lockCPU = getEnv("NIX_AFFINITY_HACK", "1") == "1";
     showTrace = false;
     enableImportNative = false;
 }
 
 
-void Settings::processEnvironment()
-{
-    nixPrefix = NIX_PREFIX;
-    nixStore = canonPath(getEnv("NIX_STORE_DIR", getEnv("NIX_STORE", NIX_STORE_DIR)));
-    nixDataDir = canonPath(getEnv("NIX_DATA_DIR", NIX_DATA_DIR));
-    nixLogDir = canonPath(getEnv("NIX_LOG_DIR", NIX_LOG_DIR));
-    nixStateDir = canonPath(getEnv("NIX_STATE_DIR", NIX_STATE_DIR));
-    nixDBPath = getEnv("NIX_DB_DIR", nixStateDir + "/db");
-    nixConfDir = canonPath(getEnv("NIX_CONF_DIR", NIX_CONF_DIR));
-    nixLibexecDir = canonPath(getEnv("NIX_LIBEXEC_DIR", NIX_LIBEXEC_DIR));
-    nixBinDir = canonPath(getEnv("NIX_BIN_DIR", NIX_BIN_DIR));
-    nixDaemonSocketFile = canonPath(nixStateDir + DEFAULT_SOCKET_PATH);
-
-    // should be set with the other config options, but depends on nixLibexecDir
-#ifdef __APPLE__
-    preBuildHook = nixLibexecDir + "/nix/resolve-system-dependencies.pl";
-#endif
-}
-
-
-void Settings::loadConfFile()
-{
-    Path settingsFile = (format("%1%/%2%") % nixConfDir % "nix.conf").str();
-    if (!pathExists(settingsFile)) return;
-    string contents = readFile(settingsFile);
-
-    unsigned int pos = 0;
-
-    while (pos < contents.size()) {
-        string line;
-        while (pos < contents.size() && contents[pos] != '\n')
-            line += contents[pos++];
-        pos++;
-
-        string::size_type hash = line.find('#');
-        if (hash != string::npos)
-            line = string(line, 0, hash);
-
-        vector<string> tokens = tokenizeString<vector<string> >(line);
-        if (tokens.empty()) continue;
-
-        if (tokens.size() < 2 || tokens[1] != "=")
-            throw Error(format("illegal configuration line ‘%1%’ in ‘%2%’") % line % settingsFile);
-
-        string name = tokens[0];
-
-        vector<string>::iterator i = tokens.begin();
-        advance(i, 2);
-        settings[name] = concatStringsSep(" ", Strings(i, tokens.end())); // FIXME: slow
-    };
-}
-
-
 void Settings::set(const string & name, const string & value)
 {
     settings[name] = value;
@@ -149,14 +91,6 @@ bool Settings::get(const string & name, bool def)
 }
 
 
-int Settings::get(const string & name, int def)
-{
-    int res = def;
-    _get(res, name);
-    return res;
-}
-
-
 void Settings::update()
 {
     _get(tryFallback, "build-fallback");
@@ -170,8 +104,6 @@ void Settings::update()
     _get(useSQLiteWAL, "use-sqlite-wal");
     _get(syncBeforeRegistering, "sync-before-registering");
     _get(useSubstitutes, "build-use-substitutes");
-    _get(buildUsersGroup, "build-users-group");
-    _get(impersonateLinux26, "build-impersonate-linux-26");
     _get(keepLog, "build-keep-log");
     _get(compressLog, "build-compress-log");
     _get(maxLogSize, "build-max-log-size");
@@ -182,26 +114,9 @@ void Settings::update()
     _get(gcKeepDerivations, "gc-keep-derivations");
     _get(autoOptimiseStore, "auto-optimise-store");
     _get(envKeepDerivations, "env-keep-derivations");
-    _get(sshSubstituterHosts, "ssh-substituter-hosts");
-    _get(useSshSubstituter, "use-ssh-substituter");
     _get(logServers, "log-servers");
     _get(enableImportNative, "allow-unsafe-native-code-during-evaluation");
     _get(useCaseHack, "use-case-hack");
-    _get(preBuildHook, "pre-build-hook");
-
-    string subs = getEnv("NIX_SUBSTITUTERS", "default");
-    if (subs == "default") {
-        substituters.clear();
-#if 0
-        if (getEnv("NIX_OTHER_STORES") != "")
-            substituters.push_back(nixLibexecDir + "/nix/substituters/copy-from-other-stores.pl");
-#endif
-        substituters.push_back(nixLibexecDir + "/nix/substituters/download-using-manifests.pl");
-        substituters.push_back(nixLibexecDir + "/nix/substituters/download-from-binary-cache.pl");
-        if (useSshSubstituter && !sshSubstituterHosts.empty())
-            substituters.push_back(nixLibexecDir + "/nix/substituters/download-via-ssh");
-    } else
-        substituters = tokenizeString<Strings>(subs, ":");
 }
 
 
@@ -253,12 +168,12 @@ template<class N> void Settings::_get(N & res, const string & name)
 string Settings::pack()
 {
     string s;
-    for (auto & i : settings) {
-        if (i.first.find('\n') != string::npos ||
-            i.first.find('=') != string::npos ||
-            i.second.find('\n') != string::npos)
+    foreach (SettingsMap::iterator, i, settings) {
+        if (i->first.find('\n') != string::npos ||
+            i->first.find('=') != string::npos ||
+            i->second.find('\n') != string::npos)
             throw Error("illegal option name/value");
-        s += i.first; s += '='; s += i.second; s += '\n';
+        s += i->first; s += '='; s += i->second; s += '\n';
     }
     return s;
 }
@@ -266,11 +181,11 @@ string Settings::pack()
 
 void Settings::unpack(const string & pack) {
     Strings lines = tokenizeString<Strings>(pack, "\n");
-    for (auto & i : lines) {
-        string::size_type eq = i.find('=');
+    foreach (Strings::iterator, i, lines) {
+        string::size_type eq = i->find('=');
         if (eq == string::npos)
             throw Error("illegal option name/value");
-        set(i.substr(0, eq), i.substr(eq + 1));
+        set(i->substr(0, eq), i->substr(eq + 1));
     }
 }
 
diff --git a/src/libstore/globals.hh b/src/libstore/globals.hh
index 60b11af..5f752e3 100644
--- a/src/libstore/globals.hh
+++ b/src/libstore/globals.hh
@@ -3,7 +3,6 @@
 #include "types.hh"
 
 #include <map>
-#include <sys/types.h>
 
 
 namespace nix {
@@ -15,10 +14,6 @@ struct Settings {
 
     Settings();
 
-    void processEnvironment();
-
-    void loadConfFile();
-
     void set(const string & name, const string & value);
 
     string get(const string & name, const string & def);
@@ -27,8 +22,6 @@ struct Settings {
 
     bool get(const string & name, bool def);
 
-    int get(const string & name, int def);
-
     void update();
 
     string pack();
@@ -42,8 +35,6 @@ struct Settings {
 
     Path nixDataDir; /* !!! fix */
 
-    Path nixPrefix;
-
     /* The directory where we log various operations. */
     Path nixLogDir;
 
@@ -146,18 +137,6 @@ struct Settings {
     /* Whether to use substitutes. */
     bool useSubstitutes;
 
-    /* The Unix group that contains the build users. */
-    string buildUsersGroup;
-
-    /* Set of ssh connection strings for the ssh substituter */
-    Strings sshSubstituterHosts;
-
-    /* Whether to use the ssh substituter at all */
-    bool useSshSubstituter;
-
-    /* Whether to impersonate a Linux 2.6 machine on newer kernels. */
-    bool impersonateLinux26;
-
     /* Whether to store build logs. */
     bool keepLog;
 
@@ -194,9 +173,6 @@ struct Settings {
        (to prevent them from being GCed). */
     bool envKeepDerivations;
 
-    /* Whether to lock the Nix client and worker to the same CPU. */
-    bool lockCPU;
-
     /* Whether to show a stack trace if Nix evaluation fails. */
     bool showTrace;
 
@@ -206,10 +182,6 @@ struct Settings {
     /* Whether the importNative primop should be enabled */
     bool enableImportNative;
 
-    /* The hook to run just before a build to set derivation-specific
-       build settings */
-    Path preBuildHook;
-
 private:
     SettingsMap settings, overrides;
 
diff --git a/src/libstore/misc.cc b/src/libstore/misc.cc
index 61a976c..33d22a8 100644
--- a/src/libstore/misc.cc
+++ b/src/libstore/misc.cc
@@ -1,6 +1,5 @@
 #include "misc.hh"
 #include "store-api.hh"
-#include "local-store.hh"
 #include "globals.hh"
 
 
@@ -11,7 +10,7 @@ Derivation derivationFromPath(StoreAPI & store, const Path & drvPath)
 {
     assertStorePath(drvPath);
     store.ensurePath(drvPath);
-    return readDerivation(drvPath);
+    return readDerivation(store.env(), drvPath);
 }
 
 
diff --git a/src/libstore/optimise-store.cc b/src/libstore/optimise-store.cc
index 23cbe7e..1cfd951 100644
--- a/src/libstore/optimise-store.cc
+++ b/src/libstore/optimise-store.cc
@@ -5,11 +5,6 @@
 #include "globals.hh"
 
 #include <cstdlib>
-#include <sys/types.h>
-#include <sys/stat.h>
-#include <unistd.h>
-#include <errno.h>
-#include <stdio.h>
 
 
 namespace nix {
@@ -51,7 +46,6 @@ LocalStore::InodeHash LocalStore::loadInodeHash()
 
     struct dirent * dirent;
     while (errno = 0, dirent = readdir(dir)) { /* sic */
-        checkInterrupt();
         // We don't care if we hit non-hash files, anything goes
         inodeHash.insert(dirent->d_ino);
     }
@@ -66,41 +60,20 @@ LocalStore::InodeHash LocalStore::loadInodeHash()
 Strings LocalStore::readDirectoryIgnoringInodes(const Path & path, const InodeHash & inodeHash)
 {
     Strings names;
-
-    AutoCloseDir dir = opendir(path.c_str());
-    if (!dir) throw SysError(format("opening directory ‘%1%’") % path);
-
-    struct dirent * dirent;
-    while (errno = 0, dirent = readdir(dir)) { /* sic */
-        checkInterrupt();
-
-        if (inodeHash.count(dirent->d_ino)) {
-            printMsg(lvlDebug, format("‘%1%’ is already linked") % dirent->d_name);
-            continue;
-        }
-
-        string name = dirent->d_name;
-        if (name == "." || name == "..") continue;
-        names.push_back(name);
-    }
-    if (errno) throw SysError(format("reading directory ‘%1%’") % path);
-
     return names;
 }
 
 
 void LocalStore::optimisePath_(OptimiseStats & stats, const Path & path, InodeHash & inodeHash)
 {
-    checkInterrupt();
-
     struct stat st;
     if (lstat(path.c_str(), &st))
         throw SysError(format("getting attributes of path ‘%1%’") % path);
 
     if (S_ISDIR(st.st_mode)) {
         Strings names = readDirectoryIgnoringInodes(path, inodeHash);
-        for (auto & i : names)
-            optimisePath_(stats, path + "/" + i, inodeHash);
+        foreach (Strings::iterator, i, names)
+            optimisePath_(stats, path + "/" + *i, inodeHash);
         return;
     }
 
@@ -120,9 +93,9 @@ void LocalStore::optimisePath_(OptimiseStats & stats, const Path & path, InodeHa
         return;
     }
 
-    /* This can still happen on top-level files. */
+    /* This can still happen on top-level files */
     if (st.st_nlink > 1 && inodeHash.count(st.st_ino)) {
-        printMsg(lvlDebug, format("‘%1%’ is already linked, with %2% other file(s)") % path % (st.st_nlink - 2));
+        printMsg(lvlDebug, format("‘%1%’ is already linked, with %2% other file(s).") % path % (st.st_nlink - 2));
         return;
     }
 
@@ -141,7 +114,6 @@ void LocalStore::optimisePath_(OptimiseStats & stats, const Path & path, InodeHa
     /* Check if this is a known hash. */
     Path linkPath = linksDir + "/" + printHash32(hash);
 
- retry:
     if (!pathExists(linkPath)) {
         /* Nope, create a hard link in the links directory. */
         if (link(path.c_str(), linkPath.c_str()) == 0) {
@@ -165,12 +137,6 @@ void LocalStore::optimisePath_(OptimiseStats & stats, const Path & path, InodeHa
         return;
     }
 
-    if (st.st_size != stLink.st_size) {
-        printMsg(lvlError, format("removing corrupted link ‘%1%’") % linkPath);
-        unlink(linkPath.c_str());
-        goto retry;
-    }
-
     printMsg(lvlTalkative, format("linking ‘%1%’ to ‘%2%’") % path % linkPath);
 
     /* Make the containing directory writable, but only if it's not
@@ -183,8 +149,8 @@ void LocalStore::optimisePath_(OptimiseStats & stats, const Path & path, InodeHa
        its timestamp back to 0. */
     MakeReadOnly makeReadOnly(mustToggle ? dirOf(path) : "");
 
-    Path tempLink = (format("%1%/.tmp-link-%2%-%3%")
-        % settings.nixStore % getpid() % rand()).str();
+    Path tempLink = (format("%1%/.tmp-link-%2%")
+        % settings.nixStore % rand()).str();
 
     if (link(linkPath.c_str(), tempLink.c_str()) == -1) {
         if (errno == EMLINK) {
@@ -225,11 +191,11 @@ void LocalStore::optimiseStore(OptimiseStats & stats)
     PathSet paths = queryAllValidPaths();
     InodeHash inodeHash = loadInodeHash();
 
-    for (auto & i : paths) {
-        addTempRoot(i);
-        if (!isValidPath(i)) continue; /* path was GC'ed, probably */
-        startNest(nest, lvlChatty, format("hashing files in ‘%1%’") % i);
-        optimisePath_(stats, i, inodeHash);
+    foreach (PathSet::iterator, i, paths) {
+        addTempRoot(*i);
+        if (!isValidPath(*i)) continue; /* path was GC'ed, probably */
+        startNest(nest, lvlChatty, format("hashing files in ‘%1%’") % *i);
+        optimisePath_(stats, *i, inodeHash);
     }
 }
 
diff --git a/src/libstore/references.cc b/src/libstore/references.cc
index 33eab5a..9d1ef1a 100644
--- a/src/libstore/references.cc
+++ b/src/libstore/references.cc
@@ -13,7 +13,7 @@ namespace nix {
 static unsigned int refLength = 32; /* characters */
 
 
-static void search(const unsigned char * s, unsigned int len,
+static void search(const unsigned char * s, unsigned int len, 
     StringSet & hashes, StringSet & seen)
 {
     static bool initialised = false;
@@ -24,7 +24,7 @@ static void search(const unsigned char * s, unsigned int len,
             isBase32[(unsigned char) base32Chars[i]] = true;
         initialised = true;
     }
-
+    
     for (unsigned int i = 0; i + refLength <= len; ) {
         int j;
         bool match = true;
@@ -56,7 +56,7 @@ struct RefScanSink : Sink
     string tail;
 
     RefScanSink() : hashSink(htSHA256) { }
-
+    
     void operator () (const unsigned char * data, size_t len);
 };
 
@@ -80,7 +80,7 @@ void RefScanSink::operator () (const unsigned char * data, size_t len)
 }
 
 
-PathSet scanForReferences(const string & path,
+PathSet scanForReferences(Vfs_root &vfs, const string & path,
     const PathSet & refs, HashResult & hash)
 {
     RefScanSink sink;
@@ -89,32 +89,32 @@ PathSet scanForReferences(const string & path,
     /* For efficiency (and a higher hit rate), just search for the
        hash part of the file name.  (This assumes that all references
        have the form `HASH-bla'). */
-    for (auto & i : refs) {
-        string baseName = baseNameOf(i);
+    foreach (PathSet::const_iterator, i, refs) {
+        string baseName = baseNameOf(*i);
         string::size_type pos = baseName.find('-');
         if (pos == string::npos)
-            throw Error(format("bad reference ‘%1%’") % i);
+            throw Error(format("bad reference ‘%1%’") % *i);
         string s = string(baseName, 0, pos);
         assert(s.size() == refLength);
         assert(backMap.find(s) == backMap.end());
         // parseHash(htSHA256, s);
         sink.hashes.insert(s);
-        backMap[s] = i;
+        backMap[s] = *i;
     }
 
     /* Look for the hashes in the NAR dump of the path. */
-    dumpPath(path, sink);
+    dumpPath(vfs, path, sink);
 
     /* Map the hashes found back to their store paths. */
     PathSet found;
-    for (auto & i : sink.seen) {
+    foreach (StringSet::iterator, i, sink.seen) {
         std::map<string, Path>::iterator j;
-        if ((j = backMap.find(i)) == backMap.end()) abort();
+        if ((j = backMap.find(*i)) == backMap.end()) abort();
         found.insert(j->second);
     }
 
     hash = sink.hashSink.finish();
-
+        
     return found;
 }
 
diff --git a/src/libstore/store-api.cc b/src/libstore/store-api.cc
index a73ebd8..d18662f 100644
--- a/src/libstore/store-api.cc
+++ b/src/libstore/store-api.cc
@@ -296,26 +296,3 @@ void exportPaths(StoreAPI & store, const Paths & paths,
 
 
 }
-
-
-#include "local-store.hh"
-#include "serialise.hh"
-#include "remote-store.hh"
-
-
-namespace nix {
-
-
-std::shared_ptr<StoreAPI> store;
-
-
-std::shared_ptr<StoreAPI> openStore(bool reserveSpace)
-{
-    if (getEnv("NIX_REMOTE") == "")
-        return std::shared_ptr<StoreAPI>(new LocalStore(reserveSpace));
-    else
-        return std::shared_ptr<StoreAPI>(new RemoteStore());
-}
-
-
-}
diff --git a/src/libstore/store-api.hh b/src/libstore/store-api.hh
index 9cc5fd4..76b43a3 100644
--- a/src/libstore/store-api.hh
+++ b/src/libstore/store-api.hh
@@ -298,6 +298,8 @@ public:
     /* Check the integrity of the Nix store.  Returns true if errors
        remain. */
     virtual bool verifyStore(bool checkContents, bool repair) = 0;
+
+    virtual Genode::Env &env() = 0;
 };
 
 
@@ -382,10 +384,6 @@ Path addPermRoot(StoreAPI & store, const Path & storePath,
 Paths topoSortPaths(StoreAPI & store, const PathSet & paths);
 
 
-/* For now, there is a single global store API object, but we'll
-   purify that in the future. */
-extern std::shared_ptr<StoreAPI> store;
-
 
 /* Factory method: open the Nix database, either through the local or
    remote implementation. */
@@ -410,5 +408,4 @@ void exportPaths(StoreAPI & store, const Paths & paths,
 MakeError(SubstError, Error)
 MakeError(BuildError, Error) /* denotes a permanent build failure */
 
-
 }
