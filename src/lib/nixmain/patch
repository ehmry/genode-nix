diff --git a/src/libmain/shared.cc b/src/libmain/shared.cc
index a6e8f35..047bfc0 100644
--- a/src/libmain/shared.cc
+++ b/src/libmain/shared.cc
@@ -12,29 +12,16 @@
 #include <algorithm>
 
 #include <cstdlib>
-#include <sys/time.h>
-#include <sys/stat.h>
-#include <unistd.h>
-#include <signal.h>
+
+/* Genode includes. */
+#include <os/config.h>
+#include <file_system_session/file_system_session.h>
 
 extern char * * environ;
 
 
 namespace nix {
 
-
-volatile sig_atomic_t blockInt = 0;
-
-
-static void sigintHandler(int signo)
-{
-    if (!blockInt) {
-        _isInterrupted = 1;
-        blockInt = 1;
-    }
-}
-
-
 static bool gcWarning = true;
 
 void printGCWarning()
@@ -47,22 +34,22 @@ void printGCWarning()
 }
 
 
-void printMissing(StoreAPI & store, const PathSet & paths)
+void printMissing(Store & store, const PathSet & paths)
 {
     unsigned long long downloadSize, narSize;
     PathSet willBuild, willSubstitute, unknown;
     queryMissing(store, paths, willBuild, willSubstitute, unknown, downloadSize, narSize);
-    printMissing(willBuild, willSubstitute, unknown, downloadSize, narSize);
+    printMissing(store, willBuild, willSubstitute, unknown, downloadSize, narSize);
 }
 
 
-void printMissing(const PathSet & willBuild,
+void printMissing(Store &store, const PathSet & willBuild,
     const PathSet & willSubstitute, const PathSet & unknown,
     unsigned long long downloadSize, unsigned long long narSize)
 {
     if (!willBuild.empty()) {
         printMsg(lvlInfo, format("these derivations will be built:"));
-        Paths sorted = topoSortPaths(*store, willBuild);
+        Paths sorted = topoSortPaths(store, willBuild);
         reverse(sorted.begin(), sorted.end());
         for (auto & i : sorted)
             printMsg(lvlInfo, format("  %1%") % i);
@@ -90,7 +77,6 @@ static void setLogType(string lt)
     if (lt == "pretty") logType = ltPretty;
     else if (lt == "escapes") logType = ltEscapes;
     else if (lt == "flat") logType = ltFlat;
-    else if (lt == "systemd") logType = ltSystemd;
     else throw UsageError("unknown log type");
 }
 
@@ -107,135 +93,19 @@ string getArg(const string & opt,
 void detectStackOverflow();
 
 
-void initNix()
+void initNix(Vfs::File_system &vfs)
 {
-    /* Turn on buffering for cerr. */
-#if HAVE_PUBSETBUF
-    static char buf[1024];
-    std::cerr.rdbuf()->pubsetbuf(buf, sizeof(buf));
-#endif
-
-    std::ios::sync_with_stdio(false);
-
-    if (getEnv("IN_SYSTEMD") == "1")
-        logType = ltSystemd;
-
-    settings.processEnvironment();
-    settings.loadConfFile();
-
-    /* Catch SIGINT. */
-    struct sigaction act;
-    act.sa_handler = sigintHandler;
-    sigemptyset(&act.sa_mask);
-    act.sa_flags = 0;
-    if (sigaction(SIGINT, &act, 0))
-        throw SysError("installing handler for SIGINT");
-    if (sigaction(SIGTERM, &act, 0))
-        throw SysError("installing handler for SIGTERM");
-    if (sigaction(SIGHUP, &act, 0))
-        throw SysError("installing handler for SIGHUP");
-
-    /* Ignore SIGPIPE. */
-    act.sa_handler = SIG_IGN;
-    act.sa_flags = 0;
-    if (sigaction(SIGPIPE, &act, 0))
-        throw SysError("ignoring SIGPIPE");
-
-    /* Reset SIGCHLD to its default. */
-    act.sa_handler = SIG_DFL;
-    act.sa_flags = 0;
-    if (sigaction(SIGCHLD, &act, 0))
-        throw SysError("resetting SIGCHLD");
-
-    /* Register a SIGSEGV handler to detect stack overflows. */
-    detectStackOverflow();
-
-    /* There is no privacy in the Nix system ;-)  At least not for
-       now.  In particular, store objects should be readable by
-       everybody. */
-    umask(0022);
-
-    /* Initialise the PRNG. */
-    struct timeval tv;
-    gettimeofday(&tv, 0);
-    srandom(tv.tv_usec);
-
-    if (char *pack = getenv("_NIX_OPTIONS"))
-        settings.unpack(pack);
-}
+    _vfs = &vfs;
 
+    /* Set verbosity. */
+    try {
+        verbosity = Verbosity(Genode::config()->xml_node().sub_node("nix").attribute_value<unsigned long>("verbosity", 0));
+    } catch (...) { verbosity = Verbosity(0); };
+}
 
 void parseCmdLine(int argc, char * * argv,
     std::function<bool(Strings::iterator & arg, const Strings::iterator & end)> parseArg)
 {
-    /* Put the arguments in a vector. */
-    Strings args;
-    argc--; argv++;
-    while (argc--) args.push_back(*argv++);
-
-    /* Process default options. */
-    for (Strings::iterator i = args.begin(); i != args.end(); ++i) {
-        string arg = *i;
-
-        /* Expand compound dash options (i.e., `-qlf' -> `-q -l -f'). */
-        if (arg.length() > 2 && arg[0] == '-' && arg[1] != '-' && isalpha(arg[1])) {
-            *i = (string) "-" + arg[1];
-            auto next = i; ++next;
-            for (unsigned int j = 2; j < arg.length(); j++)
-                if (isalpha(arg[j]))
-                    args.insert(next, (string) "-" + arg[j]);
-                else {
-                    args.insert(next, string(arg, j));
-                    break;
-                }
-            arg = *i;
-        }
-
-        if (arg == "--verbose" || arg == "-v") verbosity = (Verbosity) (verbosity + 1);
-        else if (arg == "--quiet") verbosity = verbosity > lvlError ? (Verbosity) (verbosity - 1) : lvlError;
-        else if (arg == "--log-type") {
-            string s = getArg(arg, i, args.end());
-            setLogType(s);
-        }
-        else if (arg == "--no-build-output" || arg == "-Q")
-            settings.buildVerbosity = lvlVomit;
-        else if (arg == "--print-build-trace")
-            settings.printBuildTrace = true;
-        else if (arg == "--keep-failed" || arg == "-K")
-            settings.keepFailed = true;
-        else if (arg == "--keep-going" || arg == "-k")
-            settings.keepGoing = true;
-        else if (arg == "--fallback")
-            settings.set("build-fallback", "true");
-        else if (arg == "--max-jobs" || arg == "-j")
-            settings.set("build-max-jobs", getArg(arg, i, args.end()));
-        else if (arg == "--cores")
-            settings.set("build-cores", getArg(arg, i, args.end()));
-        else if (arg == "--readonly-mode")
-            settings.readOnlyMode = true;
-        else if (arg == "--max-silent-time")
-            settings.set("build-max-silent-time", getArg(arg, i, args.end()));
-        else if (arg == "--timeout")
-            settings.set("build-timeout", getArg(arg, i, args.end()));
-        else if (arg == "--no-build-hook")
-            settings.useBuildHook = false;
-        else if (arg == "--show-trace")
-            settings.showTrace = true;
-        else if (arg == "--no-gc-warning")
-            gcWarning = false;
-        else if (arg == "--option") {
-            ++i; if (i == args.end()) throw UsageError("‘--option’ requires two arguments");
-            string name = *i;
-            ++i; if (i == args.end()) throw UsageError("‘--option’ requires two arguments");
-            string value = *i;
-            settings.set(name, value);
-        }
-        else {
-            if (!parseArg(i, args.end()))
-                throw UsageError(format("unrecognised option ‘%1%’") % *i);
-        }
-    }
-
     settings.update();
 }
 
@@ -243,47 +113,15 @@ void parseCmdLine(int argc, char * * argv,
 void printVersion(const string & programName)
 {
     std::cout << format("%1% (Nix) %2%") % programName % nixVersion << std::endl;
-    if (verbosity > lvlInfo) {
-        Strings cfg;
-#if HAVE_BOEHMGC
-        cfg.push_back("gc");
-#endif
-#if HAVE_SODIUM
-        cfg.push_back("signed-caches");
-#endif
-        std::cout << "Features: " << concatStringsSep(", ", cfg) << "\n";
-        std::cout << "Configuration file: " << settings.nixConfDir + "/nix.conf" << "\n";
-        std::cout << "Store directory: " << settings.nixStore << "\n";
-        std::cout << "State directory: " << settings.nixStateDir << "\n";
-        std::cout << "Database directory: " << settings.nixDBPath << "\n";
-    }
     throw Exit();
 }
 
 
-void showManPage(const string & name)
-{
-    restoreSIGPIPE();
-    execlp("man", "man", name.c_str(), NULL);
-    throw SysError(format("command ‘man %1%’ failed") % name.c_str());
-}
-
-
 int handleExceptions(const string & programName, std::function<void()> fun)
 {
     string error = ANSI_RED "error:" ANSI_NORMAL " ";
     try {
-        try {
-            fun();
-        } catch (...) {
-            /* Subtle: we have to make sure that any `interrupted'
-               condition is discharged before we reach printMsg()
-               below, since otherwise it will throw an (uncaught)
-               exception. */
-            blockInt = 1; /* ignore further SIGINTs */
-            _isInterrupted = 0;
-            throw;
-        }
+        fun();
     } catch (Exit & e) {
         return e.status;
     } catch (UsageError & e) {
@@ -291,10 +129,8 @@ int handleExceptions(const string & programName, std::function<void()> fun)
             format(error + "%1%\nTry ‘%2% --help’ for more information.")
             % e.what() % programName);
         return 1;
-    } catch (BaseError & e) {
-        printMsg(lvlError, format(error + "%1%%2%") % (settings.showTrace ? e.prefix() : "") % e.msg());
-        if (e.prefix() != "" && !settings.showTrace)
-            printMsg(lvlError, "(use ‘--show-trace’ to show detailed location information)");
+    } catch (Error & e) {
+        printMsg(lvlError, format(error + "%1%%2%") % e.prefix() % e.msg());
         return e.status;
     } catch (std::bad_alloc & e) {
         printMsg(lvlError, error + "out of memory");
@@ -302,77 +138,38 @@ int handleExceptions(const string & programName, std::function<void()> fun)
     } catch (std::exception & e) {
         printMsg(lvlError, error + e.what());
         return 1;
+    } catch (File_system::Permission_denied) {
+        printMsg(lvlError, error + "File_system: permission denied");
+        return 1;
+    } catch (File_system::Node_already_exists) {
+        printMsg(lvlError, error + "File_system: node already exists");
+        return 1;
+    } catch (File_system::Lookup_failed) {
+        printMsg(lvlError, error + "File_system: lookup failed");
+        return 1;
+    } catch (File_system::Name_too_long) {
+        printMsg(lvlError, error + "File_system: name too long");
+        return 1;
+    } catch (File_system::No_space) {
+        printMsg(lvlError, error + "File_system: no space");
+        return 1;
+    } catch (File_system::Out_of_node_handles) {
+        printMsg(lvlError, error + "File_system: out of node handles");
+        return 1;
+    } catch (File_system::Invalid_handle) {
+        printMsg(lvlError, error + "File_system: invalid handle");
+        return 1;
+    } catch (File_system::Invalid_name) {
+        printMsg(lvlError, error + "File_system: invalid name");
+        return 1;
+    } catch (File_system::Size_limit_reached) {
+        printMsg(lvlError, error + "File_system: size limit reached");
+        return 1;
     }
 
     return 0;
 }
 
 
-RunPager::RunPager()
-{
-    if (!isatty(STDOUT_FILENO)) return;
-    char * pager = getenv("NIX_PAGER");
-    if (!pager) pager = getenv("PAGER");
-    if (pager && ((string) pager == "" || (string) pager == "cat")) return;
-
-    /* Ignore SIGINT. The pager will handle it (and we'll get
-       SIGPIPE). */
-    struct sigaction act;
-    act.sa_handler = SIG_IGN;
-    act.sa_flags = 0;
-    sigemptyset(&act.sa_mask);
-    if (sigaction(SIGINT, &act, 0)) throw SysError("ignoring SIGINT");
-
-    restoreSIGPIPE();
-
-    Pipe toPager;
-    toPager.create();
-
-    pid = startProcess([&]() {
-        if (dup2(toPager.readSide, STDIN_FILENO) == -1)
-            throw SysError("dupping stdin");
-        if (!getenv("LESS"))
-            setenv("LESS", "FRSXMK", 1);
-        if (pager)
-            execl("/bin/sh", "sh", "-c", pager, NULL);
-        execlp("pager", "pager", NULL);
-        execlp("less", "less", NULL);
-        execlp("more", "more", NULL);
-        throw SysError(format("executing ‘%1%’") % pager);
-    });
-
-    if (dup2(toPager.writeSide, STDOUT_FILENO) == -1)
-        throw SysError("dupping stdout");
-}
-
-
-RunPager::~RunPager()
-{
-    try {
-        if (pid != -1) {
-            std::cout.flush();
-            close(STDOUT_FILENO);
-            pid.wait(true);
-        }
-    } catch (...) {
-        ignoreException();
-    }
-}
-
-
-string showBytes(unsigned long long bytes)
-{
-    return (format("%.2f MiB") % (bytes / (1024.0 * 1024.0))).str();
-}
-
-
-PrintFreed::~PrintFreed()
-{
-    if (show)
-        std::cout << format("%1% store paths deleted, %2% freed\n")
-            % results.paths.size()
-            % showBytes(results.bytesFreed);
-}
-
 
 }
diff --git a/src/libmain/shared.hh b/src/libmain/shared.hh
index 65b288e..7160c09 100644
--- a/src/libmain/shared.hh
+++ b/src/libmain/shared.hh
@@ -1,8 +1,7 @@
 #pragma once
 
 #include "util.hh"
-
-#include <signal.h>
+#include "store.hh"
 
 #include <locale>
 
@@ -23,7 +22,7 @@ class StoreAPI;
 
 int handleExceptions(const string & programName, std::function<void()> fun);
 
-void initNix();
+void initNix(Vfs::File_system &vfs);
 
 void parseCmdLine(int argc, char * * argv,
     std::function<bool(Strings::iterator & arg, const Strings::iterator & end)> parseArg);
@@ -33,9 +32,9 @@ void printVersion(const string & programName);
 /* Ugh.  No better place to put this. */
 void printGCWarning();
 
-void printMissing(StoreAPI & store, const PathSet & paths);
+void printMissing(Store & store, const PathSet & paths);
 
-void printMissing(const PathSet & willBuild,
+void printMissing(Store &store, const PathSet & willBuild,
     const PathSet & willSubstitute, const PathSet & unknown,
     unsigned long long downloadSize, unsigned long long narSize);
 
@@ -66,38 +65,4 @@ template<class N> N getIntArg(const string & opt,
     return n * multiplier;
 }
 
-/* Show the manual page for the specified program. */
-void showManPage(const string & name);
-
-/* The constructor of this class starts a pager if stdout is a
-   terminal and $PAGER is set. Stdout is redirected to the pager. */
-class RunPager
-{
-public:
-    RunPager();
-    ~RunPager();
-
-private:
-    Pid pid;
-};
-
-extern volatile ::sig_atomic_t blockInt;
-
-
-/* GC helpers. */
-
-string showBytes(unsigned long long bytes);
-
-struct GCResults;
-
-struct PrintFreed
-{
-    bool show;
-    const GCResults & results;
-    PrintFreed(bool show, const GCResults & results)
-        : show(show), results(results) { }
-    ~PrintFreed();
-};
-
-
 }
diff --git a/src/libmain/stack.cc b/src/libmain/stack.cc
index 41b617d..9438bb9 100644
--- a/src/libmain/stack.cc
+++ b/src/libmain/stack.cc
@@ -6,9 +6,6 @@
 #include <cstddef>
 #include <cstdlib>
 
-#include <unistd.h>
-#include <signal.h>
-
 namespace nix {
 
 
