set use_usb_input [expr ![have_spec ps2] && ![have_spec sdl] && [have_spec usb]]

set build_components {
	core init drivers/timer
	server/ram_fs
	server/terminal
	drivers/framebuffer drivers/input
	server/log_terminal
	server/store_import
	server/builder
	noux/minimal
	server/fs_rom

	app/nix-repl
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

lappend_if $use_usb_input       build_components drivers/usb

#
# Build Noux packages only once
#
set noux_pkgs {bash coreutils}

foreach pkg $noux_pkgs {
	lappend_if [expr ![file exists bin/$pkg]] build_components noux-pkg/$pkg }

build $build_components

# strip all binaries prior archiving
set find_args ""
foreach pkg $noux_pkgs { append find_args " bin/$pkg" }
exec sh -c "find $find_args -type f | (xargs [cross_dev_prefix]strip -g || true) 2>/dev/null"

exec ln -sf bash bin/bash/bin/sh

foreach pkg $noux_pkgs {
	exec tar cfv bin/$pkg.tar -h -C bin/$pkg . }

create_boot_directory

append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<service name="ROM">
			<if-arg key="label" value="store"/>
			<child name="store_rom"/>
		</service>
		<any-service>
			<child name="ram_fs"/>
			<child name="log_terminal"/>
			<parent/> <any-child/>
		</any-service>
	</default-route>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>}

append_platform_drv_config

append config {
	<start name="ram_fs" verbose="yes">
		<resource name="RAM" quantum="32M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<content>
				<dir name="store"/>
			</content>
			<policy label="store_import" writeable="yes" root="/store"/>
			<policy label="builder" writeable="yes" root="/store"/>
			<policy label="store_rom" root="/store"/>
			<policy label="" root="/"/>
		</config>
	</start>

	<start name="store_import">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="File_system"/></provides>
	</start>

	<start name="store_rom">
		<binary name="fs_rom"/>
		<resource name="RAM" quantum="8M"/>
		<provides><service name="ROM"/></provides>
		<route>
			<any-service>
				<child name="ram_fs"/>
				<parent/>
				<any-child/>
			</any-service>
		</route>
	</start>

	<start name="log_terminal">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Terminal"/> </provides>
	</start>

	<start name="terminal">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Terminal"/></provides>
		<config>
			<keyboard layout="dvorak"/>
		</config>
	</start>

	<start name="nix-repl">
		<resource name="RAM" quantum="16M"/>
		<route>
			<service name="ROM">
				<if-arg key="label" value="store"/>
				<child name="store_rom"/>
			</service>
			<service name="File_system">
				<if-arg key="label" value="import"/>
				<child name="store_import"/>
			</service>
			<service name="File_system">
				<child name="ram_fs"/>
			</service>
			<any-service>
				<child name="terminal"/>
				<parent/> <any-child/>
			</any-service>
		</route>
		<config verbosity="9">
			<libc stdin="/dev/log" stdout="/dev/log" stderr="/dev/log">
				<vfs>
					<rom name="depend.nix"/>
					<rom name="test.nix"/>
					<rom name="noux" />
					<dir name="corepkgs">
						<tar name="nix_corepkgs.tar"/>
					</dir>
					<dir name="noux-pkgs">}
foreach pkg $noux_pkgs {
	append config "		<rom name=\"$pkg.tar\" />"
}

append config {
					</dir>
					<dir name="dev"> <log/> </dir>
					<fs/>
				</vfs>
			</libc>
			<search-path name="nix" path="/corepkgs"/>
		</config>
	</start>}

append_if [have_spec sdl] config {
	<start name="fb_sdl">
		<resource name="RAM" quantum="4M"/>
		<config width="640" height="480"/>
		<provides>
			<service name="Input"/>
			<service name="Framebuffer"/>
		</provides>
	</start>}

append_if [have_spec framebuffer] config {
	<start name="fb_drv">
		<resource name="RAM" quantum="8M"/>
		<provides><service name="Framebuffer"/></provides>
		<config width="640" height="480"/>
	</start>}

append_if [have_spec ps2] config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start> }

append_if $use_usb_input config {
	<start name="usb_drv">
		<resource name="RAM" quantum="12M"/>
		<provides><service name="Input"/></provides>
		<config uhci="yes" ehci="no" xhci="no"> <hid/> </config>
	</start> }

append config {
	<start name="builder">
		<resource name="RAM" quantum="1G"/>
		<provides><service name="Builder"/></provides>
	</start>
</config>
}

install_config $config

set expr_fd [open "bin/depend.nix" w]
puts $expr_fd {
derivation rec {
  name = "dependency";
  builder = /noux;
  system = builtins.currentSystem;
  "bash.tar" = /noux-pkgs/bash.tar;
  "coreutils.tar" = /noux-pkgs/coreutils.tar;
  config = builtins.toFile
    "config"
    ''
      <config verbose="yes">
      	<fstab>
      		<tar name="bash.tar" />
		<tar name="coreutils.tar"/>
		<fs/>
      	</fstab>
      	<start name="/bin/bash">
		<arg value="-c"/> <arg value="echo hello ${builtins.currentSystem} world > /out"/>
      	</start>
      </config>
    '';
}
}
close $expr_fd

set expr_fd [open "bin/test.nix" w]
puts $expr_fd {
derivation rec {
  name = "echo-test";
  builder = /noux;
  system = builtins.currentSystem;
  "bash.tar" = /noux-pkgs/bash.tar;
  "coreutils.tar" = /noux-pkgs/coreutils.tar;
  dep = import /depend.nix;
  config = builtins.toFile
    "config"
    ''
      <config verbose="yes">
      	<fstab>
      		<tar name="bash.tar" />
		<tar name="coreutils.tar"/>
		<fs/>
      	</fstab>
      	<start name="/bin/bash">
		<arg value="-c"/> <arg value="cat $dep > /out"/>
      	</start>
      </config>
    '';
}
}
close $expr_fd

set boot_modules {
	core init ld.lib.so timer ram_fs log_terminal terminal fs_rom
	libc.lib.so libm.lib.so stdcxx.lib.so libc_noux.lib.so
	nixexpr.lib.so nixformat.lib.so nixmain.lib.so nixstore.lib.so nixutil.lib.so
	builder store_import noux
	nix-repl
	nix_corepkgs.tar depend.nix test.nix
}

foreach pkg $noux_pkgs {
	lappend boot_modules "$pkg.tar" }

# platform-specific modules
lappend_if [have_spec       linux] boot_modules fb_sdl
lappend_if [have_spec framebuffer] boot_modules fb_drv
lappend_if [have_spec         ps2] boot_modules ps2_drv
lappend_if $use_usb_input          boot_modules usb_drv


append_platform_drv_boot_modules

build_boot_image $boot_modules

append qemu_args { -m 512 }


