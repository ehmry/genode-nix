#
# Test of Nix-repl
#
# Not much to see here, but there is a derivation named 'drv' that can be built with ":b drv".
#

set use_usb_input [expr ![have_spec ps2] && ![have_spec sdl] && [have_spec usb]]

source ${genode_dir}/repos/base/run/platform_drv.inc

set build_components {
	core init
	app/nix-repl
	drivers/framebuffer
	drivers/input
	drivers/timer
	server/builder
	server/fs_rom
	server/store_ingest
	server/terminal
	server/vfs
	test/libc_vfs
	test/libports/ncurses
	test/libports/nixexpr
	test/timer
}

append_platform_drv_build_components

lappend_if $use_usb_input       build_components drivers/usb

build $build_components

create_boot_directory

append config {
<config>
	<parent-provides>
		<service name="CAP"/>
		<service name="CPU"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="IRQ"/>
		<service name="LOG"/>
		<service name="PD"/>
		<service name="RAM"/>
		<service name="RM"/>
		<service name="ROM"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<service name="ROM">
			<if-arg key="label" value="store"/>
			<child name="store_rom"/>
		</service>
		<any-service>
			<child name="store_fs"/>
			<parent/> <any-child/>
		</any-service>
	</default-route>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>}

append_platform_drv_config

append_if [have_spec sdl] config {
	<start name="fb_sdl">
		<resource name="RAM" quantum="4M"/>
		<config width="640" height="480"/>
		<provides>
			<service name="Input"/>
			<service name="Framebuffer"/>
		</provides>
	</start>}

append_if [have_spec framebuffer] config {
	<start name="fb_drv">
		<resource name="RAM" quantum="8M"/>
		<provides><service name="Framebuffer"/></provides>
		<config width="640" height="480"/>
	</start>}

append_if [have_spec ps2] config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start> }

append_if $use_usb_input config {
	<start name="usb_drv">
		<resource name="RAM" quantum="12M"/>
		<provides><service name="Input"/></provides>
		<config uhci="yes" ehci="no" xhci="no"> <hid/> </config>
	</start> }

append config {
	<start name="store_fs">
		<binary name="vfs"/>
		<resource name="RAM" quantum="8M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<vfs> <ram/> </vfs>
			<policy label="store_ingest" writeable="yes"/>
			<policy label="builder" writeable="yes"/>
			<policy/>
		</config>
	</start>

	<start name="store_rom">
		<binary name="fs_rom"/>
		<resource name="RAM" quantum="8M"/>
		<provides><service name="ROM"/></provides>
	</start>

	<start name="store_ingest">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="File_system"/></provides>
	</start>

	<start name="builder">
		<resource name="RAM" quantum="8M"/>
		<provides><service name="Builder"/></provides>
		<route>
			<service name="ROM" label="ld.lib.so">
				<parent/>
			</service>
			<any-service>
				<child name="store_rom"/>
				<child name="store_fs"/>
				<parent/> <any-child/>
			</any-service>
		</route>
	</start>

	<start name="terminal">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Terminal"/></provides>
		<config>
			<keyboard layout="dvorak"/>
		</config>
	</start>

	<start name="nix-repl">
		<resource name="RAM" quantum="8M"/>
		<route>
			<service name="ROM" label_prefix="store">
				<child name="store_rom"/>
			</service>
			<service name="File_system" label="store">
				<child name="store_fs"/>
			</service>
			<service name="File_system" label="ingest">
				<child name="store_ingest"/>
			</service>
			<any-service>
				<parent/> <any-child/>
			</any-service>
		</route>
		<config>
			<vfs>
				<dir name="store"> <fs label="store"/> </dir>
				<dir name="nix"> <dir name="corepkgs"> <tar name="nix_corepkgs.tar"/> </dir> </dir>
<inline name="default.nix">
rec {

  /* unix facsimilies */
  cat = builtins.readFile;
  ls = dir: builtins.attrNames (builtins.readDir dir);

  /*
   * The following is a test of a derivation
   * referencing a dependency derivation.
   */

  romSet = roms: builtins.listToAttrs (map
    (name: { inherit name; value = builtins.getRom name; })
    roms
  );

  config1 = builtins.toFile
      "config"
      ''
		<config>
			<iterations value="1"/>
			<libc stdout="/dev/log" cwd="/tmp" >
				<vfs>
					<dir name="tmp" >
						<fs/>
					</dir>
					<dir name="dev"> <log/> </dir>
				</vfs>
			</libc>
		</config>
      '';

  config2 = builtins.toFile
      "config"
      ''
		<config>
			<iterations value="1"/>
			<libc stdout="/dev/log" cwd="/tmp" >
				<vfs>
					<fs root="foobar"/>
					<dir name="tmp" >
						<fs/>
					</dir>
					<dir name="dev"> <log/> </dir>
				</vfs>
			</libc>
		</config>
      '';

  args = ((romSet [ "ld.lib.so" "libc.lib.so" ]) // {
    name ="test-libc_vfs";
    outputs = [ "testdir" ];
    system  = builtins.currentSystem;
    builder = builtins.getRom "test-libc_vfs";
    config = config1;
  });

  drv = derivation (args // { foobar = derivation args; config = config2; });
}
</inline>
			</vfs>
			<load file="/default.nix"/>
		</config>
	</start>

</config>
}

install_config $config

set boot_modules {
	core init ld.lib.so
	builder
	curl.lib.so
	fs_rom
	libc.lib.so
	libcrypto.lib.so
	libm.lib.so
	libssh.lib.so
	libssl.lib.so
	nix_corepkgs.tar
	nixexpr.lib.so
	nixformat.lib.so
	nixmain.lib.so
	nix-repl
	nixstore.lib.so
	nixutil.lib.so
	stdcxx.lib.so
	store_ingest
	terminal
	test-libc_vfs
	timer
	vfs
	zlib.lib.so
}

append_platform_drv_boot_modules

# platform-specific modules
lappend_if [have_spec       linux] boot_modules fb_sdl
lappend_if [have_spec framebuffer] boot_modules fb_drv
lappend_if [have_spec         ps2] boot_modules ps2_drv
lappend_if $use_usb_input          boot_modules usb_drv

build_boot_image $boot_modules

run_genode_until forever
