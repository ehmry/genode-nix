source ${genode_dir}/repos/base/run/platform_drv.inc

set use_usb_input [expr ![have_spec ps2] && ![have_spec sdl] && [have_spec usb]]

set build_components {
	core init
	app/nix-repl
	drivers/framebuffer
	drivers/input
	drivers/timer
	lib/libc_noux
	lib/vfs/any-rom
	noux/minimal
	server/fs_rom
	server/nix
	server/nix_store
	server/ram_fs
	server/terminal
	server/vfs
	test/libports/ncurses
	test/libports/nixexpr
}


#
# Build Noux packages only once
#
#set noux_pkgs { bash coreutils grep sed findutils make which $binutils $gcc }

set noux_pkgs { }

foreach pkg $noux_pkgs {
	lappend_if [expr ![file exists bin/$pkg]] build_components noux-pkg/$pkg }

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

# strip all binaries prior archiving
#set find_args ""
#foreach pkg $noux_pkgs { append find_args " bin/$pkg" }
#exec sh -c "find $find_args -type f | (xargs [cross_dev_prefix]strip -g || true) 2>/dev/null"

#exec ln -sf bash bin/bash/bin/sh

#foreach pkg $noux_pkgs {
#	exec tar cfv bin/$pkg.tar -h -C bin/$pkg . }

create_boot_directory

append config {
<config>
	<parent-provides>
		<service name="CPU"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="IRQ"/>
		<service name="LOG"/>
		<service name="PD"/>
		<service name="RAM"/>
		<service name="RM"/>
		<service name="ROM"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>}

append_platform_drv_config

append_if [have_spec sdl] config {
	<start name="fb_sdl">
		<resource name="RAM" quantum="4M"/>
		<config width="640" height="480"/>
		<provides>
			<service name="Input"/>
			<service name="Framebuffer"/>
		</provides>
	</start>}

append_if [have_spec framebuffer] config {
	<start name="fb_drv">
		<resource name="RAM" quantum="8M"/>
		<provides><service name="Framebuffer"/></provides>
		<config width="640" height="480"/>
	</start>}

append_if [have_spec ps2] config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start> }

append_if $use_usb_input config {
	<start name="usb_drv">
		<resource name="RAM" quantum="12M"/>
		<provides><service name="Input"/></provides>
		<config uhci="yes" ehci="no" xhci="no"> <hid/> </config>
	</start> }

append config {

	<start name="store_fs">
		<binary name="vfs"/>
		<resource name="RAM" quantum="32M"/>
		<provides>
			<service name="ROM"/>
			<service name="File_system"/>
		</provides>
		<config>
			<vfs>
				<ram/>
			</vfs>
			<rom/>
			<policy label_prefix="nix_store" writeable="yes" />
			<default-policy/>
		</config>
	</start>

	<start name="nix_store">
		<resource name="RAM" quantum="64M"/>
		<provides>
			<service name="Nix_store"/>
			<service name="File_system"/>
		</provides>
		<route>
			<service name="ROM" label_prefix="store">
				<child name="store_fs"/> </service>
			<service name="File_system">
				<child name="store_fs"/> </service>
			<any-service>
				<parent/> <any-child/>
			</any-service>
		</route>
	</start>

	<start name="terminal">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Terminal"/></provides>
		<config>
			<keyboard layout="dvorak"/>
		</config>
	</start>

	<start name="nix-repl">
		<resource name="RAM" quantum="8M"/>
		<exit propagate="yes"/>
		<route>
			<service name="ROM" label_prefix="store">
				<child name="store_fs"/>
			</service>
			<service name="File_system" label="store">
				<child name="store_fs"/>
			</service>
			<service name="File_system" label="ingest">
				<child name="nix_store"/>
			</service>
			<any-service>
				<parent/> <any-child/>
			</any-service>
		</route>
		<config>
			<nix verbosity="9"/>
			<load file="/default.nix"/>
			<vfs>
				<inline name="default.nix">
with builtins;
rec {
  ls = x: attrNames (readDir x);
  se = n: elemAt (ls /store) n;
  catN = n: readFile "/store/${se n}";
}
				</inline>
				<dir name="corepkgs">
					<tar name="nix_corepkgs.tar"/>
				</dir>
				<dir name="store"> <fs label="store"/> </dir>
			</vfs>
		</config>
	</start>

</config>
}

install_config $config


#
# Boot modules
#

# generic modules
set boot_modules {
	core init ld.lib.so
	curl.lib.so
	fb_drv
	fs_rom
	libc.lib.so
	libc_noux.lib.so
	libcrypto.lib.so
	libm.lib.so
	libssh.lib.so
	libssl.lib.so
	ncurses.lib.so
	nix_corepkgs.tar
	nixexpr.lib.so
	nixformat.lib.so
	nixmain.lib.so
	nix-repl
	nix_store
	nixstore.lib.so
	nixutil.lib.so
	noux
	ps2_drv
	ram_fs
	stdcxx.lib.so
	terminal
	timer
	vfs
	vfs_any-rom.lib.so
	zlib.lib.so
}

append_if [have_spec sdl] boot_modules { fb_sdl }


foreach pkg $noux_pkgs {
	lappend boot_modules "$pkg.tar" }

append_platform_drv_boot_modules

build_boot_image $boot_modules

append qemu_args " -m 246 "

run_genode_until forever

# vi: set ft=tcl :
