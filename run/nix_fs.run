#
# Test of the Nix File_system server
#

set platform_base_dir "base-nova"

set build_components {
	core init drivers/timer
	noux/minimal
	noux-pkg/findutils
	server/builder
	server/fs_rom
	server/log_terminal
	server/nix
	server/store_ingest
	server/vfs
	test/libports/ncurses
	test/libports/nixexpr
}

build $build_components

# strip all binaries prior archiving
exec sh -c "find noux-pkg/findutils -type f | (xargs [cross_dev_prefix]strip -g || true) 2>/dev/null"

exec tar cfv bin/findutils.tar -h -C bin/findutils .

create_boot_directory

append config {
<config>
	<parent-provides>
		<service name="CAP"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="PD"/>
		<service name="RAM"/>
		<service name="RM"/>
		<service name="ROM"/>
		<service name="SIGNAL"/>
	</parent-provides>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
		<route>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="store_fs">
		<binary name="vfs"/>
		<resource name="RAM" quantum="8M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<vfs> <ram/> </vfs>
			<policy label="store_ingest" writeable="yes"/>
			<policy label="builder" writeable="yes"/>
			<policy/>
		</config>
		<route>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="store_rom">
		<binary name="fs_rom"/>
		<resource name="RAM" quantum="8M"/>
		<provides><service name="ROM"/></provides>
		<route>
			<any-service>
				<child name="store_fs"/>
				<parent/>
			</any-service>
		</route>
	</start>

	<start name="store_ingest">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="File_system"/></provides>
		<route>
			<any-service>
				<child name="store_fs"/>
				<parent/>
			</any-service>
		</route>
	</start>

	<start name="builder">
		<resource name="RAM" quantum="8M"/>
		<provides><service name="Builder"/></provides>
		<route>
			<any-service>
				<child name="store_fs"/>
				<child name="store_rom"/>
				<parent/>
			</any-service>
		</route>
	</start>

	<start name="nix">
		<resource name="RAM" quantum="8M"/>
		<provides>
			<service name="ROM"/>
			<service name="File_system"/>
		</provides>
		<route>
			<service name="ROM" label_prefix="store">
				<child name="store_rom"/>
			</service>
			<service name="File_system" label="ingest">
				<child name="store_ingest"/>
			</service>
			<any-service>
				<child name="store_fs"/>
				<parent/> <any-child/>
			</any-service>
		</route>
		<config>
			<nix>
				<vfs>
					<dir name="corepkgs"> <tar name="nix_corepkgs.tar"/> </dir>
					<dir name="noux-pkg">
						<dir name="findutils"> <tar name="findutils.tar" /> </dir>
					</dir>
					<inline name="default.nix">name: /noux-pkg + "/${name}"</inline>
				</vfs>
				<search-path name="nix" path="/corepkgs"/>
			</nix>
			<policy/>
		</config>
	</start>

	<start name="noux">
		<resource name="RAM" quantum="8M"/>
		<route>
			<service name="File_system">
				<child name="nix"/>
			</service>
			<any-service>
				<parent/> <any-child/>
			</any-service>
		</route>
		<config verbose="yes" stdin="/dev/null" stdout="/dev/log" stderr="/dev/log">
			<fstab>
				<fs root="findutils"/>
				<dir name="dev"> <log/> <null/> </dir>
			</fstab>
			<start name="/bin/find"> </start>
		</config>
	</start>

</config>
}

install_config $config

set boot_modules {
	core init ld.lib.so timer
	builder
	findutils.tar
	fs_rom
	libc.lib.so
	libc_noux.lib.so
	libm.lib.so
	nix
	nix_corepkgs.tar
	nixexpr.lib.so
	nixformat.lib.so
	nixmain.lib.so
	nixstore.lib.so
	nixutil.lib.so
	noux
	stdcxx.lib.so
	store_ingest
	vfs
}

build_boot_image $boot_modules

append qemu_args " -nographic"

run_genode_until {child "noux" exited with exit value 0} 20
