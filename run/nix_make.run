#
# \brief  Test of Nix and Make
# \author Emery Hemingway
# \date   2016-01-18
#

set build_components {
	core init
	app/rom_logger
	drivers/timer
	noux/minimal
	server/fs_rom
	server/nix
	server/nix_store
	server/vfs
	test/libports/nixexpr
}

set noux_pkgs { "make" "bash" }

foreach pkg $noux_pkgs {
	lappend_if [expr ![file exists bin/$pkg]] build_components noux-pkg/$pkg }

build $build_components

exec ln -sf bash bin/bash/bin/sh

foreach pkg $noux_pkgs {
	exec tar cfv bin/$pkg.tar -h -C bin/$pkg . }

exec tar cvf bin/expr.tar -C $genode_dir/repos/nix/expr .

create_boot_directory

append config {
<config>
	<parent-provides>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="PD"/>
		<service name="RAM"/>
		<service name="RM"/>
		<service name="ROM"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> </any-service>
	</default-route>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>

	<start name="store_fs">
		<binary name="vfs"/>
		<resource name="RAM" quantum="8M"/>
		<provides>
			<service name="File_system"/>
		</provides>
		<config>
			<vfs> <ram/> </vfs>
			<policy label_prefix="nix_store" writeable="yes"/>
			<default-policy/>
		</config>
	</start>

	<start name="store_rom">
		<binary name="fs_rom"/>
		<resource name="RAM" quantum="8M"/>
		<provides>
			<service name="ROM"/>
		</provides>
		<route>
			<any-service> <child name="store_fs"/> <parent/> </any-service>
		</route>
	</start>

	<start name="nix_store">
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="Nix_store"/>
			<service name="File_system"/>
		</provides>
		<route>
			<service name="ROM" label="ld.lib.so">
				<parent/> </service>
			<service name="ROM">
				<child name="store_rom"/> </service>
			<service name="File_system">
				<child name="store_fs"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="nix">
		<resource name="RAM" quantum="16M"/>
		<provides><service name="ROM"/></provides>
		<route>
			<service name="Nix_store">
				<child name="nix_store"/> </service>
			<service name="ROM" label_prefix="store">
				<child name="store_rom"/> </service>
			<service name="File_system" label_prefix="store">
				<child name="store_fs"/> </service>
			<service label_prefix="ingest" name="File_system">
				<child name="nix_store"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
		<config>
			<libc stdout="/dev/log" stderr="/dev/log"/>
			<nix verbosity="0"/>
			<vfs>
				<dir name="dev"> <log/> </dir>
				<dir name="store"> <fs label="store"/> </dir>
				<dir name="corepkgs">
					<tar name="nix_corepkgs.tar"/>
				</dir>
				<dir name="expr"> <tar name="expr.tar"/> </dir>
				<inline name="default.nix">
request:
let

  makeEnv = import /expr/make.nix;

  makefile = builtins.toFile "test.mk"
    ''
      /ingest/out:
      	@echo "Hello from Make, Noux, and Nix" > $@
    '';

  result = makeEnv {
    name = "makeOutput";
    makefile = makefile;

    fstab =
      ''
        <dir name="ingest">
          <fs label="ingest"/>
        </dir>
        <fs/>
      '';
  };
in builtins.trace request result
				</inline>
			</vfs>
		</config>
	</start>

	<start name="rom_logger">
		<resource name="RAM" quantum="1M"/>
		<config rom="makeOutput" />
		<route>
			<service name="ROM"> <child name="nix"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

</config>
}

install_config $config

#
# Boot modules
#

# generic modules
set boot_modules {
	core init ld.lib.so
	curl.lib.so
	fs_rom
	libc.lib.so
	libc_noux.lib.so
	libcrypto.lib.so
	libm.lib.so
	libssh.lib.so
	libssl.lib.so
	nix
	nix_corepkgs.tar
	nixexpr.lib.so
	nixformat.lib.so
	nixmain.lib.so
	nix_store
	nixstore.lib.so
	nixutil.lib.so
	noux
	rom_logger
	stdcxx.lib.so
	test-false
	test-printf
	timer
	vfs
	zlib.lib.so

	expr.tar
}

foreach pkg $noux_pkgs {
	lappend boot_modules "$pkg.tar" }

build_boot_image $boot_modules

append qemu_args " -nographic"

run_genode_until {Hello from Make, Noux, and Nix} 120