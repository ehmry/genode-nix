#
# Test of the Nix VFS plugin
#

source ${genode_dir}/repos/base/run/platform_drv.inc
#
# On OMAP4 where no PS/2 is available, we rely on USB HID
#
proc use_usb_input { } { return [expr ![have_spec ps2] && [have_spec usb]] }

set build_components {
	core init drivers/timer
	drivers/framebuffer drivers/input
	server/vfs
	server/store_ingest
	server/builder
	server/fs_rom
	lib/vfs/nix
	test/libports/nixexpr
	server/nitpicker
	server/wm app/decorator app/floating_window_layouter
	app/pointer
	app/cli_monitor
	server/nitlog
	server/nit_fb
	server/terminal
	server/report_rom

	test/printf
	test/libc
	test/timer
	test/signal
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<service name="ROM">
			<if-arg key="label" value="store"/>
			<child name="store_rom"/>
		</service>
		<any-service>
			<child name="vfs"/>
			<parent/> <any-child/>
		</any-service>
	</default-route>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>}

append_platform_drv_config

append_if [have_spec framebuffer] config {
	<start name="fb_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Framebuffer"/></provides>
	</start>}

append_if [have_spec ps2] config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start> }

append_if [have_spec gpio] config {
	<start name="gpio_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Gpio"/></provides>
		<config/>
	</start>}

append_if [use_usb_input] config {
	<start name="usb_drv">
		<resource name="RAM" quantum="12M"/>
		<provides><service name="Input"/></provides>
		<config uhci="yes" ehci="yes" xhci="yes"> <hid/> </config>
	</start> }

append config {
	<start name="vfs">
		<binary name="vfs"/>
		<resource name="RAM" quantum="8M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<vfs>
				<dir name="store"> <ram quota="6M"/> </dir>
			</vfs>
			<policy label="store_ingest" writeable="yes" root="/store"/>
			<policy label="builder" writeable="yes" root="/store"/>
			<policy label="store_rom" root="/store"/>
			<policy label="cli_monitor -> store" root="/store"/>
			<policy label="" root="/"/>
		</config>
	</start>

	<start name="store_rom">
		<binary name="fs_rom"/>
		<resource name="RAM" quantum="8M"/>
		<provides><service name="ROM"/></provides>
	</start>

	<start name="store_ingest">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="File_system"/></provides>
	</start>

	<start name="builder">
		<resource name="RAM" quantum="32M"/>
		<provides><service name="Builder"/></provides>
	</start>

	<start name="nitpicker">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Nitpicker"/></provides>
		<config>
			<domain name="pointer" layer="1" xray="no" origin="pointer" />
			<domain name=""        layer="2" />

			<policy label="pointer" domain="pointer"/>
			<policy label=""             domain=""/>
		</config>
		<route>
			<any-service>
				<child name="fb_drv"/>
				<child name="ps2_drv"/>
				<parent/> <any-child/>
			</any-service>
		</route>
	</start>

	<start name="pointer" priority="-1">
		<resource name="RAM" quantum="1M"/>
		<route>
			<any-service>
				<child name="nitpicker"/>
				<parent/> <any-child/>
			</any-service>
		</route>
	</start>

	<start name="wm_report_rom" priority="-1">
		<binary name="report_rom" />
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="Report"/>
			<service name="ROM"/>
		</provides>
		<config>
			<rom>
				<policy label="layouter -> window_list"     report="wm -> window_list"/>
				<policy label="decorator -> window_layout"  report="layouter -> window_layout"/>
				<policy label="wm -> resize_request"        report="layouter -> resize_request"/>
				<policy label="decorator -> pointer"        report="wm -> pointer"/>
				<policy label="layouter -> hover"           report="decorator -> hover"/>
				<policy label="wm -> focus"                 report="layouter -> focus"/>
			</rom>
		</config>
	</start>
	<start name="wm" priority="-1">
		<resource name="RAM" quantum="12M"/>
		<provides>
			<service name="Nitpicker"/>
		</provides>
		<config>
			<policy label="decorator" role="decorator"/>
			<policy label="layouter"  role="layouter"/>
		</config>
		<route>
			<any-service>
				<child name="nitpicker"/> <child name="wm_report_rom"/> <parent/> <any-child/>
			</any-service>
		</route>
	</start>

	<start name="layouter" priority="-1">
		<binary name="floating_window_layouter"/>
		<resource name="RAM" quantum="4M"/>
		<route>
			<any-service>
				<child name="wm"/> <child name="wm_report_rom"/> <parent/> <any-child/>
			</any-service>
		</route>
	</start>

	<start name="decorator" priority="-1">
		<binary name="decorator"/>
		<resource name="RAM" quantum="8M"/>
		<route>
			<any-service>
				<child name="wm"/> <child name="wm_report_rom"/> <parent/> <any-child/>
			</any-service>
		</route>
	</start>

	<start name="cli_nit_fb" priority="-1">
		<binary name="nit_fb"/>
		<resource name="RAM" quantum="8M" />
		<provides>
			<service name="Framebuffer" />
			<service name="Input" />
		</provides>
		<config width="640" height="480" />
		<route>
			<any-service>
				<child name="wm"/>
				<parent/> <any-child/>
			</any-service>
		</route>
	</start>

	<start name="cli_terminal" priority="-1">
		<binary name="terminal"/>
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Terminal"/></provides>
		<config>
			<keyboard layout="us"/>
			<font size="12" />
		</config>
		<route>
			<any-service>
				<child name="cli_nit_fb"/>
				<parent/> <any-child/>
			</any-service>
		</route>
	</start>


	<start name="cli_monitor">
		<resource name="RAM" quantum="48M"/>
		<provides> <service name="File_system"/> </provides>
		<route>
			<service name="ROM">
				<if-arg key="label" value="store"/>
				<child name="store_rom"/>
			</service>
			<service name="File_system">
				<if-arg key="label" value="ingest"/>
				<child name="store_ingest"/>
			</service>
			<service name="File_system">
				<child name="vfs"/>
			</service>
			<any-service>
				<child name="wm"/>
				<parent/> <any-child/>
			</any-service>
		</route>
		<config>
			<nix>
				<vfs>
					<dir name="corepkgs"> <tar name="nix_corepkgs.tar"/> </dir>
					<rom name="cli_monitor.nix"/>
				</vfs>
				<search-path name="nix" path="/corepkgs"/>
			</nix>
			<vfs>
				<dir name="subsystems">
					<nix file="/cli_monitor.nix" attr="logSubsystem">
						<argstr name="name" value="test-printf"/>
						<argstr name="help" value="print test"/>
					</nix>
					<nix file="/cli_monitor.nix" attr="logSubsystem">
						<argstr name="name" value="test-libc"/>
						<argstr name="help" value="libc test"/>
						<argstr name="ram" value="8M"/>
					</nix>
					<nix file="/cli_monitor.nix" attr="logSubsystem">
						<argstr name="name" value="test-timer"/>
						<argstr name="help" value="timer test"/>
						<argstr name="ram" value="8M"/>
					</nix>
					<nix file="/cli_monitor.nix" attr="logSubsystem">
						<argstr name="name" value="test-signal"/>
						<argstr name="help" value="signal test"/>
						<argstr name="ram" value="8M"/>
					</nix>
				</dir>
			</vfs>
		</config>
	</start>

</config>
}

install_config $config

set boot_modules {
	core init ld.lib.so timer vfs fs_rom
	libc.lib.so libm.lib.so stdcxx.lib.so
	nixexpr.lib.so nixformat.lib.so nixmain.lib.so nixstore.lib.so nixutil.lib.so
	vfs_nix.lib.so
	builder store_ingest
	nix_corepkgs.tar
	nitpicker
	pointer
	wm decorator floating_window_layouter
	report_rom
	nit_fb
	terminal
	cli_monitor

	nitlog
	cli_monitor.nix
	test-printf
	test-libc
	test-timer
	test-signal
}

file copy -force [genode_dir]/repos/nix/expr/cli_monitor.nix bin

# platform-specific modules
lappend_if [have_spec       linux] boot_modules fb_sdl
lappend_if [have_spec         ps2] boot_modules ps2_drv
lappend_if [have_spec framebuffer] boot_modules fb_drv
lappend_if [use_usb_input]         boot_modules usb_drv
lappend_if [have_spec gpio]        boot_modules gpio_drv

append_platform_drv_boot_modules

build_boot_image $boot_modules

append qemu_args " -m 256"

run_genode_until forever
