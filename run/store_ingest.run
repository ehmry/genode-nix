#
# Ingest consistency test
#

set build_components {
	core
	drivers/timer
	init
	lib/libc_noux
	lib/vfs/jitterentropy
	noux/minimal
	server/store_ingest
	server/vfs
	test/libports/ncurses
}

#
# Build Noux packages only once
#
foreach pkg {bash coreutils} {
	lappend_if [expr ![file exists bin/$pkg]] build_components noux-pkg/$pkg }

build $build_components

# strip all binaries prior archiving
exec sh -c "find bin/bash/ bin/coreutils/ -type f | (xargs [cross_dev_prefix]strip || true) 2>/dev/null"

exec tar cfv bin/bash.tar      -h -C bin/bash .
exec tar cfv bin/coreutils.tar -h -C bin/coreutils .

file copy -force [genode_dir]/repos/nix/run/ingest_loop.sh bin

create_boot_directory

append config {
	<config verbose="yes">
		<parent-provides>
			<service name="ROM"/>
			<service name="LOG"/>
			<service name="CAP"/>
			<service name="RAM"/>
			<service name="RM"/>
			<service name="CPU"/>
			<service name="PD"/>
			<service name="SIGNAL"/>
		</parent-provides>
		<default-route>
			<any-service> <parent/> <any-child/> </any-service>
		</default-route>
		<start name="timer">
			<resource name="RAM" quantum="1M"/>
			<provides><service name="Timer"/></provides>
		</start>
	<start name="vfs">
		<resource name="RAM" quantum="10M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<vfs> <ram/> </vfs>
			<policy label="store_ingest" writeable="yes"/>
			<default-policy/>
		</config>
	</start>
	<start name="store_ingest">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="File_system"/> </provides>
		<route>
			<service name="File_system">
				<child name="vfs"/>
			</service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
	<start name="noux" verbose="yes">
		<resource name="RAM" quantum="1G" />
		<route>
			<service name="File_system" label="ingest">
				<child name="store_ingest" />
			</service>
			<service name="File_system" label="store">
				<child name="vfs" />
			</service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
		<config stdin="/dev/null" stdout="/dev/log" stderr="/dev/log">
			<fstab>
				<dir name="dev">
					<jitterentropy name="random"/>
					<log/>
					<null/>
					<zero/>
				</dir>
				<dir name="store" > <fs label="store"/> </dir>
				<dir name="ingest"> <fs label="ingest" /> </dir>
				<rom name="ingest_loop.sh" />
				<tar name="coreutils.tar"  />
				<tar name="bash.tar"       />
			</fstab>
			<start name="/bin/bash">
				<arg value="/ingest_loop.sh"/>
			</start>
		</config>
	</start>
</config>
}

install_config $config


#
# Boot modules
#

# generic modules
set boot_modules {
	bash.tar
	core
	coreutils.tar
	ingest_loop.sh
	init
	ld.lib.so
	libc.lib.so
	libc_noux.lib.so
	libm.lib.so
	ncurses.lib.so
	noux
	store_ingest
	timer
	vfs
	vfs_jitterentropy.lib.so
}

build_boot_image $boot_modules

append qemu_args " -nographic"

if {[have_spec x86_64]} {
	# bash.tar is really huge when built for x86_64
	append qemu_args " -m 320"
}

run_genode_until "nd5p94bfndbmmj1n25fq3v79253w9mrq-zero-8" 60

file delete bin/bash.tar bin/coreutils.tar bin/ingest_loop.sh
